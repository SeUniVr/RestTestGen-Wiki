{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/docs","tagsPath":"/docs/tags","isLast":true,"routePriority":-1,"sidebarFilePath":"/home/sofia/Scrivania/RestTestGen-Wiki/sidebars.ts","contentPath":"/home/sofia/Scrivania/RestTestGen-Wiki/docs","contentPathLocalized":"/home/sofia/Scrivania/RestTestGen-Wiki/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"automated-testing","title":"About Automated API Testing","description":"Typically, an API (Application Programming Interface) is a set of rules and protocols that allow software to communicate with each other by exchanging data and information. API architecture, in general, is explained in terms of client and server: there is an application that sends a request (client) and an application that sends the response (server).","source":"@site/docs/automated-testing.md","sourceDirName":".","slug":"/automated-testing","permalink":"/docs/automated-testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"overviewSidebar","previous":{"title":"RestTestGen","permalink":"/docs/rtg"}},{"id":"rtg","title":"RestTestGen","description":"RestTestGen is a testing framework created to automatically generate test cases for the REST API. The assumption made a priori is that one cannot have direct access to the source code, but only to the OpenAPI specification, and that one can interact with the REST API directly via the HTTP protocol.","source":"@site/docs/rtg.md","sourceDirName":".","slug":"/rtg","permalink":"/docs/rtg","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"overviewSidebar","next":{"title":"About Automated API Testing","permalink":"/docs/automated-testing"}},{"id":"rtg-framework/components/core","title":"Core Components","description":"The tool provides researchers and practitioners with some “core components” that are presented in detail below.","source":"@site/docs/rtg-framework/components/core.md","sourceDirName":"rtg-framework/components","slug":"/rtg-framework/components/core","permalink":"/docs/rtg-framework/components/core","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/components/core-extensibile-description","title":"Architecture","description":"The architecture of RTG can be seen in the figure. It provides developers and researchers with two types of components. It is possible to find core components that work out-of-the box, and extensible components that can be re-implemented to give developers, or those who need them, the possibility of creating totally customised strategies.","source":"@site/docs/rtg-framework/components/core-extensibile-description.md","sourceDirName":"rtg-framework/components","slug":"/rtg-framework/components/core-extensibile-description","permalink":"/docs/rtg-framework/components/core-extensibile-description","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","next":{"title":"Core Components","permalink":"/docs/category/core-components"}},{"id":"rtg-framework/components/extensible","title":"Extensible Components","description":"These components are a set of abstract and concrete classes for which researchers or experts might want to provide a new implementation to realise their new testing algorithm.","source":"@site/docs/rtg-framework/components/extensible.md","sourceDirName":"rtg-framework/components","slug":"/rtg-framework/components/extensible","permalink":"/docs/rtg-framework/components/extensible","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/datatype/operation","title":"Operation","description":"The Operation class makes it possible to represent an operation within the OpenAPI specification that is being parsed. The class contains several attributes that serve to better describe the functionality being considered. Here are the main ones:","source":"@site/docs/rtg-framework/datatype/operation.md","sourceDirName":"rtg-framework/datatype","slug":"/rtg-framework/datatype/operation","permalink":"/docs/rtg-framework/datatype/operation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Parameters","permalink":"/docs/rtg-framework/datatype/parameters"},"next":{"title":"Test Interaction, Test Sequence, Test Runner, Test Result","permalink":"/docs/rtg-framework/datatype/test-sequence-interaction-runner"}},{"id":"rtg-framework/datatype/parameters","title":"Parameters","description":"The abstract class `Parameter` provides the representation of a parameter within the OpenAPI specification. Parameters are used in HTTP requests to pass data, e.g. in query parameters, header, body, ...","source":"@site/docs/rtg-framework/datatype/parameters.md","sourceDirName":"rtg-framework/datatype","slug":"/rtg-framework/datatype/parameters","permalink":"/docs/rtg-framework/datatype/parameters","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"OpenApi Parser","permalink":"/docs/rtg-framework/parser/"},"next":{"title":"Operation","permalink":"/docs/rtg-framework/datatype/operation"}},{"id":"rtg-framework/datatype/test-sequence-interaction-runner","title":"Test Interaction, Test Sequence, Test Runner, Test Result","description":"In order to handle the HTTP requests that are executed during the test, several components are provided that facilitate the interaction between the framework itself and the REST API being tested. These are the `TestInteraction` class, the `TestSequence` class, the `TestRunner` class and the `TestResult` class. They are explained in detail below.","source":"@site/docs/rtg-framework/datatype/test-sequence-interaction-runner.md","sourceDirName":"rtg-framework/datatype","slug":"/rtg-framework/datatype/test-sequence-interaction-runner","permalink":"/docs/rtg-framework/datatype/test-sequence-interaction-runner","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Operation","permalink":"/docs/rtg-framework/datatype/operation"},"next":{"title":"Operation Dependency Graph","permalink":"/docs/rtg-framework/odg/"}},{"id":"rtg-framework/fuzzer/error-fuzzer","title":"Error Fuzzer","description":"This class generates mutant test sequences by applying changes to the parameters of API requests to test their robustness and error handling capability. The aim is to simulate erroneous inputs to test the API's error handling. Mutations are applied to request parameters to generate variants with missing values, wrong types or violated constraints. Finally, mutated sequences are executed and evaluated to test the behaviour of the API in abnormal scenarios.  The operation of the Fuzzer is explained below. First, a test sequence is passed in to be modified. Mutators are defined (e.g. `MissingrequiredParameterMutator`, `WrongTypeParameterMutator`, `ConstraintViolationParameterMutator`). After that, mutated sequences are generated and, for each interaction of the original sequence, n variants are created. An applicable mutator is randomly selected and this new interaction is created and executed by a `TestRunner`.  The report is also written using ReportWriter and RestAssuredWriter.","source":"@site/docs/rtg-framework/fuzzer/error-fuzzer.md","sourceDirName":"rtg-framework/fuzzer","slug":"/rtg-framework/fuzzer/error-fuzzer","permalink":"/docs/rtg-framework/fuzzer/error-fuzzer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/fuzzer/fuzzer","title":"Fuzzer","description":"A fuzzer is an automatic testing tool that injects random or mutated input into a system to detect errors, vulnerabilities or unexpected behaviour.","source":"@site/docs/rtg-framework/fuzzer/fuzzer.md","sourceDirName":"rtg-framework/fuzzer","slug":"/rtg-framework/fuzzer/","permalink":"/docs/rtg-framework/fuzzer/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/fuzzer/mass-assignment-fuzzer","title":"Mass Assignment Fuzzer","description":"This fuzzer deals with generating sequences to check the vulnerability of mass assignments.  This class accepts an object of type CrudGroup that contains a set of CRUD operations on an object. These operations are divided into distinct sets. The “producer”, “consumer” and “read-only” parameters are identified (i.e. they are returned by read operations but are never modified). After that, test sequences are generated to inject the parameters into CRUD operations. These sequences test how a REST API handles mass assignment and may include attempts to modify parameters that should not be modifiable. A significant part of the class is devoted to generating test sequences for injecting parameters into creation operations. These sequences are executed on various read-only parameters and try to see if the application can be affected by modifying parameters that should not be modifiable.  Within this fuzzer, you can also find the `generateUpdateInjectionSequence` method, which generates test sequences that test for vulnerabilities in the handling of update parameters by combining create, read and update operations in a sequence. In this case, for each read-only parameter, a sequence is created whereby a resource is created, its parameters are read, and finally an update operation is performed that attempts to inject an unscheduled parameter into the update process.","source":"@site/docs/rtg-framework/fuzzer/mass-assignment-fuzzer.md","sourceDirName":"rtg-framework/fuzzer","slug":"/rtg-framework/fuzzer/mass-assignment-fuzzer","permalink":"/docs/rtg-framework/fuzzer/mass-assignment-fuzzer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/fuzzer/nominal-fuzzer","title":"Nominal Fuzzer","description":"This fuzzer is designed to generate nominal test sequences for interaction with a REST API. The main purpose of this class is to create test sequences that simulate different input scenarios to test the behavior of an operation.  The `generateTestSequence()` method generates a single test sequence. First, the original operation is cloned into an “editableOperation”. Let us look in detail at the various methods used to value the parameters:","source":"@site/docs/rtg-framework/fuzzer/nominal-fuzzer.md","sourceDirName":"rtg-framework/fuzzer","slug":"/rtg-framework/fuzzer/nominal-fuzzer","permalink":"/docs/rtg-framework/fuzzer/nominal-fuzzer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/fuzzer/subsequence-error-fuzzer","title":"Subsequence Error Fuzzer","description":"This class is designed to generate test sequences that simulate errors in sub-sequences of an existing test sequence. Unlike other fuzzers, this class takes an existing test sequence, chooses a sub-sequence and corrupts it, applying mutations to the operation parameters it contains.","source":"@site/docs/rtg-framework/fuzzer/subsequence-error-fuzzer.md","sourceDirName":"rtg-framework/fuzzer","slug":"/rtg-framework/fuzzer/subsequence-error-fuzzer","permalink":"/docs/rtg-framework/fuzzer/subsequence-error-fuzzer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/interaction-processor/graph-inter-processor","title":"Graph Interaction Processor","description":"This is an implementation of the abstract class InteractionProcessor that updates a dependency graph between API operations based on the responses received in tests.  First of all, it is checked whether the interaction can be processed. In fact, only interactions that have been successfully executed are processed. After that, the interaction is processed. The operation is marked as tested in the dependency graph (OperationDependencyGraph). The response body is analysed to identify parameters that may satisfy dependencies of other operations, and the graph is updated, marking detected dependencies as \"satisfied\".","source":"@site/docs/rtg-framework/interaction-processor/graph-inter-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/graph-inter-processor","permalink":"/docs/rtg-framework/interaction-processor/graph-inter-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/interaction-processor/interaction-processor","title":"Interaction Processor","description":"The abstract class `InteractionProcessor` defines an interface for processing test interactions. Within this class we find two methods: `canProcess`, to check whether an interaction is suitable for processing; `process` used to execute the processing of the interaction.","source":"@site/docs/rtg-framework/interaction-processor/interaction-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/","permalink":"/docs/rtg-framework/interaction-processor/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Mutator","permalink":"/docs/rtg-framework/mutator/"},"next":{"title":"Oracle","permalink":"/docs/rtg-framework/oracle/"}},{"id":"rtg-framework/interaction-processor/jsonparser-inter-processor","title":"JSON Parser Interaction Processor","description":"This component takes care of interpreting and converting the JSON responses received from the API into an internal parameter structure. This makes the response data more easily usable for subsequent tests.","source":"@site/docs/rtg-framework/interaction-processor/jsonparser-inter-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/jsonparser-inter-processor","permalink":"/docs/rtg-framework/interaction-processor/jsonparser-inter-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/interaction-processor/nlp-inter-processor","title":"NLP Interaction Processor","description":"This interaction processor uses natural language processing (NLP) to extract rules from error messages returned by the server. The idea behind this component is to analyse the messages returned in response to incorrect API requests (`400 status code`) to extract useful information and convert this data into testable rules.","source":"@site/docs/rtg-framework/interaction-processor/nlp-inter-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/nlp-inter-processor","permalink":"/docs/rtg-framework/interaction-processor/nlp-inter-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/interaction-processor/request-dictionary-inter-processor","title":"Request Dictionary Interaction Processor","description":"This interaction processor stores the parameters of test requests in a global and local dictionary. The objective is to construct and maintain a dictionary of the request parameters used in tests, so that they can be reused in future tests. First, it is checked whether the interaction is processable, i.e. whether it was successfully executed and whether the status code is 200 or 201. If this is satisfied, then the request parameters are processed. After that, the interaction is processed. The parameters are taken from the request and used in the interaction. Leaf parameters and those with an assigned value are filtered out. For each valid parameter, an entry is created and added to the global dictionary. It is also possible to set up a local dictionary.","source":"@site/docs/rtg-framework/interaction-processor/request-dictionary-inter-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/request-dictionary-inter-processor","permalink":"/docs/rtg-framework/interaction-processor/request-dictionary-inter-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/interaction-processor/response-dictionary-inter-processor","title":"Response Dictionary Interaction Processor","description":"This interaction processor stores the parameters of API responses in a global dictionary and a local dictionary. The aim is to collect and store the parameter values in the body of the tested API responses in order to be able to reuse them in future tests. Again, it is checked whether the interaction is processable, i.e. whether it was successfully executed and whether the response has a positive status code, i.e. 200 or 201. It is also checked whether the response body isn’t empty. If all conditions are met, then the response body is analysed and the LeafParameters are extracted, null values are excluded, and for each valid parameter an entry is created and added to the global dictionary. If there is also a local dictionary, the entry is also added there.","source":"@site/docs/rtg-framework/interaction-processor/response-dictionary-inter-processor.md","sourceDirName":"rtg-framework/interaction-processor","slug":"/rtg-framework/interaction-processor/response-dictionary-inter-processor","permalink":"/docs/rtg-framework/interaction-processor/response-dictionary-inter-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/mutator/mutator","title":"Mutator","description":"A mutator is a software component that modifies in a controlled manner certain aspects of an entity, such as data, parameters or operations, with the aim of generating variations useful for testing, optimisation or analysis of the robustness of a system.","source":"@site/docs/rtg-framework/mutator/mutator.md","sourceDirName":"rtg-framework/mutator","slug":"/rtg-framework/mutator/","permalink":"/docs/rtg-framework/mutator/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Parameter Value Provider","permalink":"/docs/rtg-framework/pvp/"},"next":{"title":"Interaction Processor","permalink":"/docs/rtg-framework/interaction-processor/"}},{"id":"rtg-framework/mutator/operation-mutator/mutate-random-mutator","title":"Mutate Random Parameter With Parameter Mutator Operation Mutator","description":"This is an operation mutator.","source":"@site/docs/rtg-framework/mutator/operation-mutator/mutate-random-mutator.md","sourceDirName":"rtg-framework/mutator/operation-mutator","slug":"/rtg-framework/mutator/operation-mutator/mutate-random-mutator","permalink":"/docs/rtg-framework/mutator/operation-mutator/mutate-random-mutator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/mutator/parameter-mutator/constraint-violation-mutator","title":"Constraint Violation Parameter Mutator","description":"Is a mutator that alters parameter values so as to violate their constraints.  First, it is checked whether a parameter is mutable (i.e. whether it is an enum with predefined values, a string with minimum or maximum length constraints, a number with upper or lower bounds). If the parameter is mutable, then it is modified to violate its constraints. Thus, if the parameter is an enum, a random value is set that does not belong to the list of values; if the parameter is a string, the length constraint is violated; if the parameter is a number, finally, the minimum or maximum value constraint is violated. The aim is to generate invalid input to test the behaviour of the system in the event of errors.","source":"@site/docs/rtg-framework/mutator/parameter-mutator/constraint-violation-mutator.md","sourceDirName":"rtg-framework/mutator/parameter-mutator","slug":"/rtg-framework/mutator/parameter-mutator/constraint-violation-mutator","permalink":"/docs/rtg-framework/mutator/parameter-mutator/constraint-violation-mutator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/mutator/parameter-mutator/missing-required-mutator","title":"Missing Required Parameter Mutator","description":"This mutator is designed to test the operation of the system when mandatory parameters are removed in requests. A parameter is considered mutable if it is mandatory. If the parameter is mutable, then it is removed. Therefore, if the parameter is a `LeafParameter`, the value is deleted; if the parameter is an array, then all values are deleted; if the parameters are of another type, they are directly removed from the operation. The aim is to generate incomplete requests to test the error handling by the REST API under test.","source":"@site/docs/rtg-framework/mutator/parameter-mutator/missing-required-mutator.md","sourceDirName":"rtg-framework/mutator/parameter-mutator","slug":"/rtg-framework/mutator/parameter-mutator/missing-required-mutator","permalink":"/docs/rtg-framework/mutator/parameter-mutator/missing-required-mutator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/mutator/parameter-mutator/wrong-type-mutator","title":"Wrong Type Parameter Mutator","description":"This mutator is designed to change the type of a parameter incorrectly. First, it is checked whether the parameter is mutable (i.e. type string, number or boolean). The original parameter is replaced with a different type. For example, a string can become a number or a boolean. The choice is made randomly, and the new parameter receives a random value from a ValueProvider. The aim is to simulate erroneous inputs to test whether the system detects and correctly handles type errors in the parameters.","source":"@site/docs/rtg-framework/mutator/parameter-mutator/wrong-type-mutator.md","sourceDirName":"rtg-framework/mutator/parameter-mutator","slug":"/rtg-framework/mutator/parameter-mutator/wrong-type-mutator","permalink":"/docs/rtg-framework/mutator/parameter-mutator/wrong-type-mutator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/odg/odg","title":"Operation Dependency Graph","description":"This class represents a graph of the dependencies between operations defined in a specific OpneAPI. The nodes of the graph represent operations; the arcs, on the other hand, represent dependencies between operations, e.g. when an operation produces a parameter that another operation uses.","source":"@site/docs/rtg-framework/odg/odg.md","sourceDirName":"rtg-framework/odg","slug":"/rtg-framework/odg/","permalink":"/docs/rtg-framework/odg/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Test Interaction, Test Sequence, Test Runner, Test Result","permalink":"/docs/rtg-framework/datatype/test-sequence-interaction-runner"},"next":{"title":"Extensible Components","permalink":"/docs/category/extensible-components"}},{"id":"rtg-framework/operation-sorter/dynamic/graph-based-operation-sorter","title":"Graph Based Operation Sorter","description":"This class extends `DynamicOperationSorter` and orders the operations to be tested according to a dependency structure between operations, represented by a graph (`OperationDependencyGraph`). The aim is to test the operations with fewer unsatisfied parameters and fewer previous test attempts first, optimising the order of the tests. In addition, the maximum attempts that can be made to test a given operation are also managed. In the dependency graph, nodes represent operations, while arcs indicate dependencies between operations. Dependent operations are fulfilled when the required inputs have been produced by previous operations. Note the `removeFirst()` methods that extract the first operation from the queue and the `refresh()` method that repopulates the queue with operations that have not yet been tested. They are ordered by number of unsatisfied parameters, HTTP method (CRUD semantics is followed), number of previous test attempts.","source":"@site/docs/rtg-framework/operation-sorter/dynamic/graph-based-operation-sorter.md","sourceDirName":"rtg-framework/operation-sorter/dynamic","slug":"/rtg-framework/operation-sorter/dynamic/graph-based-operation-sorter","permalink":"/docs/rtg-framework/operation-sorter/dynamic/graph-based-operation-sorter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/operation-sorter/operation-sorter","title":"Operation Sorter","description":"There are two type of operation sorter, the static and the dynamic one. Both of them extend the `OperationSorter` class.","source":"@site/docs/rtg-framework/operation-sorter/operation-sorter.md","sourceDirName":"rtg-framework/operation-sorter","slug":"/rtg-framework/operation-sorter/","permalink":"/docs/rtg-framework/operation-sorter/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Extensible Components","permalink":"/docs/category/extensible-components"},"next":{"title":"Parameter Value Provider","permalink":"/docs/rtg-framework/pvp/"}},{"id":"rtg-framework/operation-sorter/static/random-operation-sorter","title":"Random Operation Sorter","description":"This class implements a random order of the operations to be tested. A list of operations is retrieved from the environment and then a “shuffle” is applied to this list. Unlike the class described above, no structured strategy is followed.","source":"@site/docs/rtg-framework/operation-sorter/static/random-operation-sorter.md","sourceDirName":"rtg-framework/operation-sorter/static","slug":"/rtg-framework/operation-sorter/static/random-operation-sorter","permalink":"/docs/rtg-framework/operation-sorter/static/random-operation-sorter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/oracle/error-status-code-oracle","title":"Error Status Code Oracle","description":"This is a test oracle which verifies whether a TestSequence has been handled correctly by the server. It is based on the HTTP status code.","source":"@site/docs/rtg-framework/oracle/error-status-code-oracle.md","sourceDirName":"rtg-framework/oracle","slug":"/rtg-framework/oracle/error-status-code-oracle","permalink":"/docs/rtg-framework/oracle/error-status-code-oracle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/oracle/mass-assignment-oracle","title":"Mass Assignment Oracle","description":"This oracle checks whether a test sequence has exposed a Mass Assignment vulnerability. This vulnerability occurs when an attacker is able to modify unintended fields of an object sent to a REST API.","source":"@site/docs/rtg-framework/oracle/mass-assignment-oracle.md","sourceDirName":"rtg-framework/oracle","slug":"/rtg-framework/oracle/mass-assignment-oracle","permalink":"/docs/rtg-framework/oracle/mass-assignment-oracle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/oracle/oracle","title":"Oracle","description":"This component deals with making assertions on the correct execution of a `TestSequence`. Some implementations of the tool are already provided within the tool. Details of these are explained below.","source":"@site/docs/rtg-framework/oracle/oracle.md","sourceDirName":"rtg-framework/oracle","slug":"/rtg-framework/oracle/","permalink":"/docs/rtg-framework/oracle/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Interaction Processor","permalink":"/docs/rtg-framework/interaction-processor/"},"next":{"title":"Writer","permalink":"/docs/rtg-framework/writer/"}},{"id":"rtg-framework/oracle/producer-consumer-oracle","title":"Producer Consumer Oracle","description":"This oracle assesses whether a test sequence consisting of two interactions operates on the same “object” in a producer-consumer relationship. In other words, it checks whether the output of the first interaction is used as input in the second.","source":"@site/docs/rtg-framework/oracle/producer-consumer-oracle.md","sourceDirName":"rtg-framework/oracle","slug":"/rtg-framework/oracle/producer-consumer-oracle","permalink":"/docs/rtg-framework/oracle/producer-consumer-oracle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/oracle/status-code-oracle","title":"Status Code Oracle","description":"This is an oracle that evaluates the outcome of a `TestSequence`, based on the HTTP status codes of the answers.  First, it is checked whether the `TestSequence` was executed and if, at least one `TestInteraction` was not executed, everything is terminated with an error. After that, the status codes of the answers are analysed. If all interactions have a status code of class `2XX`, then the test passes. Otherwise, if at least one interaction has a `5XX` error code, the test is considered to have failed. If neither of these two conditions occur and at least one interaction has an error code of class `4XX` (i.e. client error), then the test is indeterminate.","source":"@site/docs/rtg-framework/oracle/status-code-oracle.md","sourceDirName":"rtg-framework/oracle","slug":"/rtg-framework/oracle/status-code-oracle","permalink":"/docs/rtg-framework/oracle/status-code-oracle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/parser/parser","title":"OpenApi Parser","description":"The OpenApiParser class deals with the parsing of the OpenAPI specification. The methods of the class are constructed so that the parser is resilient and tolerant of unexpected behaviour. For example, properties not belonging to the grammar are ignored, while inconsistencies with the specification are corrected when possible.","source":"@site/docs/rtg-framework/parser/parser.md","sourceDirName":"rtg-framework/parser","slug":"/rtg-framework/parser/","permalink":"/docs/rtg-framework/parser/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Core Components","permalink":"/docs/category/core-components"},"next":{"title":"Parameters","permalink":"/docs/rtg-framework/datatype/parameters"}},{"id":"rtg-framework/pvp/multi-strategy/enum-example-pvp","title":"Enum and Example Priority Parameter Value Provider","description":"This is a multiple selection strategy for choosing a value for the `LeafParameter`. In this case, the two providers `EnumParameterValueProvider` and `ExamplesParameterValueProvider` are retrieved and the available values for each provider are counted. If at least one of the two has available values, a decision is made whether to choose one of them with a probability of 80%. In this case, a random choice is made between the EnumParameterValueProvider and the ExamplesParameterValueProvider.","source":"@site/docs/rtg-framework/pvp/multi-strategy/enum-example-pvp.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/enum-example-pvp","permalink":"/docs/rtg-framework/pvp/multi-strategy/enum-example-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/multi-strategy/global-dictionary-pvp","title":"Global Dictionary Priority Parameter Value Provider","description":"This multiple value selection strategy gives priority to the answer dictionary.  First, an attempt is made to obtain a value from the answer dictionary and, if there are values available, one of these is returned. If, on the other hand, the dictionary does not return any values, other strategies are then tried using the `EnumParameterValueProvider`, `ExamplesParameterValueProvider` and `DefaultParameterValueProvider`. At this point, if none of the previous strategies provided a value, the random generation with Random or Narrow Random strategy is performed.","source":"@site/docs/rtg-framework/pvp/multi-strategy/global-dictionary-pvp.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/global-dictionary-pvp","permalink":"/docs/rtg-framework/pvp/multi-strategy/global-dictionary-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/multi-strategy/keep-last-id-pvp","title":"Keep Last ID Parameter Value Provider","description":"The main objective of this strategy is to maintain and reuse the last observed ID value for a parameter. In this way, an intelligent approach is attempted, avoiding generating new IDs when an existing one can be reused. If the value is not available, on the other hand, various strategies are tried until random generation.","source":"@site/docs/rtg-framework/pvp/multi-strategy/keep-last-id-pvp.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/keep-last-id-pvp","permalink":"/docs/rtg-framework/pvp/multi-strategy/keep-last-id-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/multi-strategy/local-dictionary","title":"Local Dictionary Priority Parameter Value Provider","description":"This technique attempts to value a `LeafParameter`, using different strategies, but still giving priority to the use of the local dictionary. Nevertheless, if the local dictionary does not have a valid value, it switches to other strategies.","source":"@site/docs/rtg-framework/pvp/multi-strategy/local-dictionary.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/local-dictionary","permalink":"/docs/rtg-framework/pvp/multi-strategy/local-dictionary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/multi-strategy/multi-strategy","title":"Multi Strategy","description":"Multi strategies include the classes: `EnumAndExamplePriorityParameterValueProvider`, `RandomProviderParameterValueProvider`, `KeepLastIdParameterValueProvider`, `LocalDictionaryPriorityParameterValueProvider`.","source":"@site/docs/rtg-framework/pvp/multi-strategy/multi-strategy.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/","permalink":"/docs/rtg-framework/pvp/multi-strategy/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/multi-strategy/random-pvp","title":"Random Provider Parameter Value Provider","description":"This class implements a flexible strategy for selecting parameter values by randomly choosing from several available sources. Two lists are defined, one of always available providers (`RandomParameterValueProvider` and `NarrowRandomParameterValueProvider`) and one of candidate providers (Default, Enum, Examples, ResponseDictionary, RequestDictionary, LastResponseDictionary, LastRequestDictionary). The providers are filtered to exclude those with no available values and a source is randomly chosen from the remaining ones.","source":"@site/docs/rtg-framework/pvp/multi-strategy/random-pvp.md","sourceDirName":"rtg-framework/pvp/multi-strategy","slug":"/rtg-framework/pvp/multi-strategy/random-pvp","permalink":"/docs/rtg-framework/pvp/multi-strategy/random-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/pvp","title":"Parameter Value Provider","description":"This set of classes is used to provide a value to various parameters, based on different valuation methodologies. In the implementation of RestTestGen, we find two macro-types: single and multiple (i.e. combining several single strategies).","source":"@site/docs/rtg-framework/pvp/pvp.md","sourceDirName":"rtg-framework/pvp","slug":"/rtg-framework/pvp/","permalink":"/docs/rtg-framework/pvp/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Operation Sorter","permalink":"/docs/rtg-framework/operation-sorter/"},"next":{"title":"Mutator","permalink":"/docs/rtg-framework/mutator/"}},{"id":"rtg-framework/pvp/single-strategy/default-pvp","title":"Default Parameter Value Provider","description":"When a parameter is requested, the class attempts to retrieve the default values given in the OpenAPI specification. If the `SAMENAME` mode is enabled, it collects the default values of all parameters with the same name; if the `SAMENORMALISED_NAME` mode is enabled, it collects those with the same normalized name; in all other cases, it uses only the default value of the specific parameter.","source":"@site/docs/rtg-framework/pvp/single-strategy/default-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/default-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/default-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/enum-pvp","title":"Enum Parameter Value Provider","description":"When a parameter is requested, this class uses the enumerated values (enum) defined in the OpenAPI specification. By default, only the values of the specific parameter are taken, however, it is also possible to set `SAMENAME` or `SAMENORMALISED_NAME`.","source":"@site/docs/rtg-framework/pvp/single-strategy/enum-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/enum-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/enum-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/examples-pvp","title":"Examples Parameter Value Provider","description":"When a parameter value is requested, the default example values in the OpenAPI specification are used. In this way, the example values are documented and realistic.","source":"@site/docs/rtg-framework/pvp/single-strategy/examples-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/examples-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/examples-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/last-request-pvp","title":"Last Request Dictionary Parameter Value Provider","description":"A global dictionary is relied upon to value parameters with this technique. This contains the values collected from previous API requests, allowing the most recent data to be reused. By default, the provider uses the global dictionary of requests that is available in the Environment. This dictionary contains DictionaryEntries that associate parameters with specific values recorded during previous API requests. The constructor sets the mode `SAMENORMALISEDNAME`, which means that values will be collected not only from parameters with the same name, but also from those with the normalised name.","source":"@site/docs/rtg-framework/pvp/single-strategy/last-request-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/last-request-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/last-request-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/last-response-pvp","title":"Last Response Dictionary Parameter Value Provider","description":"Similar to the class described above, values from a dictionary are also used here. However, the values are taken from a global response dictionary, i.e. from data obtained from the answers of executed requests. By default, the class uses the global response dictionary which is available via `Environment.getInstance()`. The constructor sets the `SAMENORMALISEDNAME` mode, allowing values to be collected not only by the exact name of the parameter, but also by its normalised name.","source":"@site/docs/rtg-framework/pvp/single-strategy/last-response-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/last-response-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/last-response-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/request-pvp","title":"Request Dictionary Parameter Value Provider","description":"Through this value provider, parameters can be given a value using a global request dictionary. A dictionary is used that collects the values used in previous requests, allowing them to be reused in subsequent requests.","source":"@site/docs/rtg-framework/pvp/single-strategy/request-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/request-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/request-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/response-pvp","title":"Response Dictionary Parameter Value Provider","description":"Through this value provider, parameters can be given a value using a global dictionary of answers. A dictionary is used that collects values from previous answers. By default, the class uses the global response dictionary, obtained via `Environment.getInstance().getGlobalResponseDictionary()`. The constructor sets the `SAMENORMALISEDNAME` mode, allowing values to be collected not only from the exact name of the parameter, but also from its normalised name. By default, the option to remove duplicates is enabled to avoid returning redundant values.","source":"@site/docs/rtg-framework/pvp/single-strategy/response-pvp.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/response-pvp","permalink":"/docs/rtg-framework/pvp/single-strategy/response-pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/pvp/single-strategy/single-strategy","title":"Single Strategy","description":"Individual strategies include the classes: `DefaultParameterValueProvider`, `EnumParameterValueProvider`, `ExamplesParameterValueProvider`, `LastRequestDictionaryParameterValueProvider`, `LastResponseDictionaryValueProvider`, `RequestDictionaryParameterValueProvider`, `ResponseDictionaryParameterValueProvider`. They all extend the `CountableParameterValueProvider` class, which in turn extends the abstract `ParameterValueProvider` class. An example of a hierarchy can be found in the figure below.","source":"@site/docs/rtg-framework/pvp/single-strategy/single-strategy.md","sourceDirName":"rtg-framework/pvp/single-strategy","slug":"/rtg-framework/pvp/single-strategy/","permalink":"/docs/rtg-framework/pvp/single-strategy/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/strategy/strategy","title":"Strategy","description":"To execute RestTestGen, the `main()` method inside the App class within the package `io.resttestgen.boot.cli` is executed. Within the project, there is also a configuration file `rtg-config.yml` in which anyone wishing to use the tool must specify the strategy to be used and the API to be tested.","source":"@site/docs/rtg-framework/strategy/strategy.md","sourceDirName":"rtg-framework/strategy","slug":"/rtg-framework/strategy/","permalink":"/docs/rtg-framework/strategy/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Writer","permalink":"/docs/rtg-framework/writer/"}},{"id":"rtg-framework/writer/coverage-report","title":"Coverage Report Writer","description":"The purpose of this class is to collect test case coverage data, organise it in JSON format and save it in a dedicated folder so that it can be easily analysed. The information is retrieved on the basis of the Coverage Manager component, which contains the information collected during the test session.","source":"@site/docs/rtg-framework/writer/coverage-report.md","sourceDirName":"rtg-framework/writer","slug":"/rtg-framework/writer/coverage-report","permalink":"/docs/rtg-framework/writer/coverage-report","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/writer/report-writer","title":"Report Writer","description":"This class is useful for generating and storing detailed reports on `TestSequences`, allowing the results to be analysed later. The JSON structure facilitates integration with other data analysis or visualisation tools.","source":"@site/docs/rtg-framework/writer/report-writer.md","sourceDirName":"rtg-framework/writer","slug":"/rtg-framework/writer/report-writer","permalink":"/docs/rtg-framework/writer/report-writer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/writer/rest-assured-writer","title":"RestAssured Writer","description":"Allows the created `TestSequence` to be converted into test cases using the RestAssured framework. The class consists of various methods for creating a suitable test class. First, the necessary imports are defined and the actual class is generated with its annotations. Then, for each `TestInteraction` in the sequence, the corresponding method within the test class is generated. This means that for each `TestInteraction`, the method signature is created, the parameters are initialised, the request to be performed is defined and, finally, the assertions are also specified.","source":"@site/docs/rtg-framework/writer/rest-assured-writer.md","sourceDirName":"rtg-framework/writer","slug":"/rtg-framework/writer/rest-assured-writer","permalink":"/docs/rtg-framework/writer/rest-assured-writer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}},{"id":"rtg-framework/writer/writer","title":"Writer","description":"The framework provides a component that allows the various `TestSequences` to be written to file. This is useful when a researcher or programmer needs to have a clearer view of the various tests that have been performed on the REST API under test.  At the moment, only three implementations are provided, however, it is possible to create others as desired and according to individual needs.","source":"@site/docs/rtg-framework/writer/writer.md","sourceDirName":"rtg-framework/writer","slug":"/rtg-framework/writer/","permalink":"/docs/rtg-framework/writer/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"frameworkSidebar","previous":{"title":"Oracle","permalink":"/docs/rtg-framework/oracle/"},"next":{"title":"Strategy","permalink":"/docs/rtg-framework/strategy/"}},{"id":"rtg-tool/strategy/introduction","title":"Introduction","description":"Within this section of the documentation, you will find a description of the strategies that have already been implemented within RestTestGen. In fact, you can test your API using the strategies that have already been made available, instead of creating your own.","source":"@site/docs/rtg-tool/strategy/introduction.md","sourceDirName":"rtg-tool/strategy","slug":"/rtg-tool/strategy/introduction","permalink":"/docs/rtg-tool/strategy/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"strategiesSidebar","next":{"title":"Functional Testing Strategies","permalink":"/docs/category/functional-testing-strategies"}},{"id":"rtg-tool/strategy/mass-assignment-strategy","title":"Mass Assignment Strategy","description":"The \"mass assignment\" vulnerability is one of the peculiar vulnerabilities of this application domain. This vulnerability originates from a misconfiguration of any REST API framework that can provide an automatic binding between input data fields (controlled by a potential attacker) and the internal data representation (e.g. database columns). Successful exploitation of such a vulnerability may allow malicious attackers to manipulate private data. However, they would have to guess the names of the internal data structures (e.g. database tables and columns) used by the REST API.","source":"@site/docs/rtg-tool/strategy/mass-assignment-strategy.md","sourceDirName":"rtg-tool/strategy","slug":"/rtg-tool/strategy/mass-assignment-strategy","permalink":"/docs/rtg-tool/strategy/mass-assignment-strategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"strategiesSidebar","previous":{"title":"Security Testing Strategies","permalink":"/docs/category/security-testing-strategies"},"next":{"title":"Other Strategies","permalink":"/docs/category/other-strategies"}},{"id":"rtg-tool/strategy/nlp-strategy","title":"NLP Strategy","description":"The idea of this strategy is to apply natural language processing techniques to improve the testing of REST APIs. Given an OpenAPI specification, some additional rules are extracted based on the human-readable part of the specification. Consider, for example, a particular specification that describes the parameters of a particular request. We may, for example, have the parameter `language` to which is associated a `description` in which the accepted values are made explicit. Similarly, we may have a `count` parameter to which, again, is associated a `description` field in which it is specified that the maximum value is `50`. In these two cases, a normal automated testing tool could miss these characteristics and thus create unsuitable or failing test cases.","source":"@site/docs/rtg-tool/strategy/nlp-strategy.md","sourceDirName":"rtg-tool/strategy","slug":"/rtg-tool/strategy/nlp-strategy","permalink":"/docs/rtg-tool/strategy/nlp-strategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"strategiesSidebar","previous":{"title":"Other Strategies","permalink":"/docs/category/other-strategies"}},{"id":"rtg-tool/strategy/nominal-error-strategy","title":"Nominal and Error Strategy","description":"The objective of this strategy is to successfully test all the operations in the REST API that are to be investigated. To do this, an ordering based on the Operation Dependency Graph (ODG) is defined. For all other responsibilities (generation of input values, oracles and writers), this strategy is based on basic components available in the framework.","source":"@site/docs/rtg-tool/strategy/nominal-error-strategy.md","sourceDirName":"rtg-tool/strategy","slug":"/rtg-tool/strategy/nominal-error-strategy","permalink":"/docs/rtg-tool/strategy/nominal-error-strategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"strategiesSidebar","previous":{"title":"Functional Testing Strategies","permalink":"/docs/category/functional-testing-strategies"},"next":{"title":"Security Testing Strategies","permalink":"/docs/category/security-testing-strategies"}},{"id":"rtg-tool/strategy/strategy","title":"Strategy","description":"To execute RestTestGen, the `main()` method inside the App class within the package `io.resttestgen.boot.cli` is executed. Within the project, there is also a configuration file `rtg-config.yml` in which anyone wishing to use the tool must specify the strategy to be used and the API to be tested.","source":"@site/docs/rtg-tool/strategy/strategy.md","sourceDirName":"rtg-tool/strategy","slug":"/rtg-tool/strategy/","permalink":"/docs/rtg-tool/strategy/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}],"drafts":[],"sidebars":{"overviewSidebar":[{"type":"doc","id":"rtg"},{"type":"doc","id":"automated-testing"}],"frameworkSidebar":[{"type":"doc","id":"rtg-framework/components/core-extensibile-description"},{"type":"category","label":"Core Components","link":{"type":"generated-index","description":"This section presents the core components within the RTG framework.","slug":"/category/core-components","permalink":"/docs/category/core-components"},"items":[{"type":"doc","id":"rtg-framework/parser/parser"},{"type":"doc","id":"rtg-framework/datatype/parameters"},{"type":"doc","id":"rtg-framework/datatype/operation"},{"type":"doc","id":"rtg-framework/datatype/test-sequence-interaction-runner"},{"type":"doc","id":"rtg-framework/odg/odg"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Extensible Components","link":{"type":"generated-index","description":"This section presents the extensible components within the RTG framework.","slug":"/category/extensible-components","permalink":"/docs/category/extensible-components"},"items":[{"type":"doc","id":"rtg-framework/operation-sorter/operation-sorter"},{"type":"doc","id":"rtg-framework/pvp/pvp"},{"type":"doc","id":"rtg-framework/mutator/mutator"},{"type":"doc","id":"rtg-framework/interaction-processor/interaction-processor"},{"type":"doc","id":"rtg-framework/oracle/oracle"},{"type":"doc","id":"rtg-framework/writer/writer"},{"type":"doc","id":"rtg-framework/strategy/strategy"}],"collapsed":true,"collapsible":true}],"strategiesSidebar":[{"type":"doc","id":"rtg-tool/strategy/introduction"},{"type":"category","label":"Functional Testing Strategies","link":{"type":"generated-index","slug":"/category/functional-testing-strategies","permalink":"/docs/category/functional-testing-strategies"},"items":[{"type":"doc","id":"rtg-tool/strategy/nominal-error-strategy"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security Testing Strategies","link":{"type":"generated-index","slug":"/category/security-testing-strategies","permalink":"/docs/category/security-testing-strategies"},"items":[{"type":"doc","id":"rtg-tool/strategy/mass-assignment-strategy"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Other Strategies","link":{"type":"generated-index","slug":"/category/other-strategies","permalink":"/docs/category/other-strategies"},"items":[{"type":"doc","id":"rtg-tool/strategy/nlp-strategy"}],"collapsed":true,"collapsible":true}]}}]}},"docusaurus-plugin-content-blog":{"default":{"blogSidebarTitle":"Recent posts","blogPosts":[],"blogListPaginated":[],"blogTags":{},"blogTagsListPath":"/blog/tags"}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/","source":"@site/src/pages/index.tsx"},{"type":"mdx","permalink":"/markdown-page","source":"@site/src/pages/markdown-page.md","title":"Markdown page example","description":"You don't need React to write simple standalone pages.","frontMatter":{"title":"Markdown page example"},"unlisted":false}]},"docusaurus-plugin-debug":{},"docusaurus-plugin-svgr":{},"docusaurus-theme-classic":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}