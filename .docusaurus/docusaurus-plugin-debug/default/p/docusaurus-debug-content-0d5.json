{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/docs","tagsPath":"/docs/tags","isLast":true,"routePriority":-1,"sidebarFilePath":"/home/sofia/Scrivania/RestTestGen-Wiki/sidebars.ts","contentPath":"/home/sofia/Scrivania/RestTestGen-Wiki/docs","contentPathLocalized":"/home/sofia/Scrivania/RestTestGen-Wiki/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"intro","title":"A Brief Recap","description":"Typically, an API (Application Programming Interface) is a set of rules and protocols that allow software to communicate with each other by exchanging data and information. API architecture, in general, is explained in terms of client and server: there is an application that sends a request (client) and an application that sends the response (server).","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Tool Overview","permalink":"/docs/category/tool-overview"}},{"id":"rtg-components/fuzzer","title":"Fuzzer","description":"A fuzzer is an automatic testing tool that injects random or mutated input into a system to detect errors, vulnerabilities or unexpected behaviour.","source":"@site/docs/rtg-components/fuzzer.md","sourceDirName":"rtg-components","slug":"/rtg-components/fuzzer","permalink":"/docs/rtg-components/fuzzer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interaction Processor","permalink":"/docs/rtg-components/interaction-processor"},"next":{"title":"Parameters","permalink":"/docs/rtg-components/parameters"}},{"id":"rtg-components/interaction-processor","title":"Interaction Processor","description":"The abstract class `InteractionProcessor` defines an interface for processing test interactions. Within this class we find two methods: `canProcess`, to check whether an interaction is suitable for processing; `process` used to execute the processing of the interaction.","source":"@site/docs/rtg-components/interaction-processor.md","sourceDirName":"rtg-components","slug":"/rtg-components/interaction-processor","permalink":"/docs/rtg-components/interaction-processor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Mutator","permalink":"/docs/rtg-components/mutator"},"next":{"title":"Fuzzer","permalink":"/docs/rtg-components/fuzzer"}},{"id":"rtg-components/mutator","title":"Mutator","description":"A mutator is a software component that modifies in a controlled manner certain aspects of an entity, such as data, parameters or operations, with the aim of generating variations useful for testing, optimisation or analysis of the robustness of a system.","source":"@site/docs/rtg-components/mutator.md","sourceDirName":"rtg-components","slug":"/rtg-components/mutator","permalink":"/docs/rtg-components/mutator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Operation Sorter","permalink":"/docs/rtg-components/operation-sorter"},"next":{"title":"Interaction Processor","permalink":"/docs/rtg-components/interaction-processor"}},{"id":"rtg-components/operation-sorter","title":"Operation Sorter","description":"There are two type of operation sorter, the static and the dynamic one. Both of them extend the `OperationSorter` class.","source":"@site/docs/rtg-components/operation-sorter.md","sourceDirName":"rtg-components","slug":"/rtg-components/operation-sorter","permalink":"/docs/rtg-components/operation-sorter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Oracle","permalink":"/docs/rtg-components/oracle"},"next":{"title":"Mutator","permalink":"/docs/rtg-components/mutator"}},{"id":"rtg-components/oracle","title":"Oracle","description":"This component deals with making assertions on the correct execution of a `TestSequence`. Some implementations of the tool are already provided within the tool. Details of these are explained below.","source":"@site/docs/rtg-components/oracle.md","sourceDirName":"rtg-components","slug":"/rtg-components/oracle","permalink":"/docs/rtg-components/oracle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Parameter Value Provider","permalink":"/docs/rtg-components/pvp"},"next":{"title":"Operation Sorter","permalink":"/docs/rtg-components/operation-sorter"}},{"id":"rtg-components/parameters","title":"Parameters","description":"The abstract class `Parameter` provides the representation of a parameter within the OpenAPI specification. Parameters are used in HTTP requests to pass data, e.g. in query parameters, header, body, ...","source":"@site/docs/rtg-components/parameters.md","sourceDirName":"rtg-components","slug":"/rtg-components/parameters","permalink":"/docs/rtg-components/parameters","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Fuzzer","permalink":"/docs/rtg-components/fuzzer"}},{"id":"rtg-components/pvp","title":"Parameter Value Provider","description":"This set of classes is used to provide a value to various parameters, based on different valuation methodologies. In the implementation of RestTestGen, we find two macro-types: single and multiple (i.e. combining several single strategies).","source":"@site/docs/rtg-components/pvp.md","sourceDirName":"rtg-components","slug":"/rtg-components/pvp","permalink":"/docs/rtg-components/pvp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Strategy","permalink":"/docs/rtg-components/strategy"},"next":{"title":"Oracle","permalink":"/docs/rtg-components/oracle"}},{"id":"rtg-components/strategy","title":"Strategy","description":"To execute RestTestGen, the `main()` method inside the App class within the package `io.resttestgen.boot.cli` is executed. Within the project, there is also a configuration file `rtg-config.yml` in which anyone wishing to use the tool must specify the strategy to be used and the API to be tested.","source":"@site/docs/rtg-components/strategy.md","sourceDirName":"rtg-components","slug":"/rtg-components/strategy","permalink":"/docs/rtg-components/strategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Writer","permalink":"/docs/rtg-components/writer"},"next":{"title":"Parameter Value Provider","permalink":"/docs/rtg-components/pvp"}},{"id":"rtg-components/writer","title":"Writer","description":"The framework provides a component that allows the various `TestSequences` to be written to file. This is useful when a researcher or programmer needs to have a clearer view of the various tests that have been performed on the REST API under test.  At the moment, only three implementations are provided, however, it is possible to create others as desired and according to individual needs.","source":"@site/docs/rtg-components/writer.md","sourceDirName":"rtg-components","slug":"/rtg-components/writer","permalink":"/docs/rtg-components/writer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"RTG Components","permalink":"/docs/category/rtg-components"},"next":{"title":"Strategy","permalink":"/docs/rtg-components/strategy"}},{"id":"rtg-overview/core-components/core","title":"Core Components","description":"The tool provides researchers and practitioners with some “core components” that are presented in detail below.","source":"@site/docs/rtg-overview/core-components/core.md","sourceDirName":"rtg-overview/core-components","slug":"/rtg-overview/core-components/core","permalink":"/docs/rtg-overview/core-components/core","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tool Overview","permalink":"/docs/category/tool-overview"},"next":{"title":"Extensible Components","permalink":"/docs/rtg-overview/extensible-components/extensible"}},{"id":"rtg-overview/extensible-components/extensible","title":"Extensible Components","description":"These components are a set of abstract and concrete classes for which researchers or experts might want to provide a new implementation to realise their new testing algorithm.","source":"@site/docs/rtg-overview/extensible-components/extensible.md","sourceDirName":"rtg-overview/extensible-components","slug":"/rtg-overview/extensible-components/extensible","permalink":"/docs/rtg-overview/extensible-components/extensible","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Core Components","permalink":"/docs/rtg-overview/core-components/core"},"next":{"title":"RTG Components","permalink":"/docs/category/rtg-components"}},{"id":"rtg-overview/main","title":"Tool Overview","description":"","source":"@site/docs/rtg-overview/main.md","sourceDirName":"rtg-overview","slug":"/rtg-overview/main","permalink":"/docs/rtg-overview/main","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}],"drafts":[],"sidebars":{"tutorialSidebar":[{"type":"doc","id":"intro"},{"type":"category","label":"Tool Overview","link":{"type":"generated-index","description":"RestTestGen is a tool created to automatically generate test cases for REST APIs. The tool assumes that the source code ofthe service to be tested cannot be accessed, but one can rely on the OpenAPI specification and can interact with the REST API via the HTTP protocol.The OpenAPI specification of the REST API makes it possible to know what operations are available, what format of input data is needed to enable the toolto perform well-formed HTTP requests, and the format of the responses or output data.The advantage of using a black box approach is to be able to create a tool that is independent of the programming language with which the REST servicehas been implemented. Furthermore, for systems with complex architectures consisting of many micro-services, implementing a tool with a white box approachcan be much more difficult.","slug":"/category/tool-overview","permalink":"/docs/category/tool-overview"},"items":[{"type":"doc","id":"rtg-overview/core-components/core"},{"type":"doc","id":"rtg-overview/extensible-components/extensible"}],"collapsed":true,"collapsible":true},{"type":"category","label":"RTG Components","link":{"type":"generated-index","description":"Components described in details.","slug":"/category/rtg-components","permalink":"/docs/category/rtg-components"},"items":[{"type":"doc","id":"rtg-components/writer"},{"type":"doc","id":"rtg-components/strategy"},{"type":"doc","id":"rtg-components/pvp"},{"type":"doc","id":"rtg-components/oracle"},{"type":"doc","id":"rtg-components/operation-sorter"},{"type":"doc","id":"rtg-components/mutator"},{"type":"doc","id":"rtg-components/interaction-processor"},{"type":"doc","id":"rtg-components/fuzzer"},{"type":"doc","id":"rtg-components/parameters"}],"collapsed":true,"collapsible":true}]}}]}},"docusaurus-plugin-content-blog":{"default":{"blogSidebarTitle":"Recent posts","blogPosts":[],"blogListPaginated":[],"blogTags":{},"blogTagsListPath":"/blog/tags"}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/","source":"@site/src/pages/index.tsx"},{"type":"mdx","permalink":"/markdown-page","source":"@site/src/pages/markdown-page.md","title":"Markdown page example","description":"You don't need React to write simple standalone pages.","frontMatter":{"title":"Markdown page example"},"unlisted":false}]},"docusaurus-plugin-debug":{},"docusaurus-plugin-svgr":{},"docusaurus-theme-classic":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}